{"version":3,"file":"civitai_helper.js","mappings":";;;;;;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;;;;;;;;;;ACpBR;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;;;;;;;UCbxB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;ACtBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB,mBAAO,CAAC,+CAAiB;AACjD,2BAA2B,mBAAO,CAAC,qDAAoB;AACvcAAc;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,aAAa;AACnD;AACA,6CAA6C,kBAAkkCAAkC,WAAW;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://Stable-Diffusion-Webui-Civitai-Helper/./src/ch_sd_version.ts","webpack://Stable-Diffusion-Webui-Civitai-Helper/./src/getActiveTabType.ts","webpack://Stable-Diffusion-Webui-Civitai-Helper/webpack/bootstrap","webpack://Stable-Diffusion-Webui-Civitai-Helper/./src/main.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ch_sd_version = void 0;\nfunction ch_sd_version() {\n    let foot = gradioApp().getElementById(\"footer\");\n    if (!foot) {\n        return null;\n    }\n    let versions = foot.querySelector(\".versions\");\n    if (!versions) {\n        return null;\n    }\n    let [webui_version] = versions.getElementsByTagName(\"a\");\n    if (!webui_version) {\n        return null;\n    }\n    const version_text = webui_version.innerHTML.substring(1);\n    const webui_version_text = version_text.match(/v[0-9]\\.[0-9]\\.[0-9]/)[0];\n    return webui_version_text;\n}\nexports.ch_sd_version = ch_sd_version;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getActiveTabType = void 0;\nfunction getActiveTabType() {\n    const currentTab = get_uiCurrentTabContent();\n    switch (currentTab.id) {\n        case \"tab_txt2img\":\n            return \"txt2img\";\n        case \"tab_img2img\":\n            return \"img2img\";\n    }\n    return null;\n}\nexports.getActiveTabType = getActiveTabType;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ch_sd_version_1 = require(\"./ch_sd_version\");\nconst getActiveTabType_1 = require(\"./getActiveTabType\");\nonUiLoaded(() => {\n    console.log(\"ui loaded\");\n    // get all extra network tabs\n    let tab_prefix_list = [\"txt2img\", \"img2img\"];\n    let model_type_list = [\n        \"textual_inversion\",\n        \"hypernetworks\",\n        \"checkpoints\",\n        \"lora\",\n    ];\n    let cardid_suffix = \"cards\";\n    // update extra network tab pages' cards\n    // * replace \"replace preview\" text button into an icon\n    // * add 3 button to each card:\n    //  - open model url 🌐\n    //  - add trigger words 💡\n    //  - use preview image's prompt 🏷️\n    // notice: javascript can not get response from python side\n    // so, these buttons just sent request to python\n    // then, python side gonna open url and update prompt text box, without telling js side.\n    function update_card_for_civitai() {\n        var _a;\n        //css\n        let btn_margin = \"0px 5px\";\n        let btn_fontSize = \"200%\";\n        let btn_thumb_fontSize = \"100%\";\n        let btn_thumb_display = \"inline\";\n        let btn_thumb_pos = \"static\";\n        let btn_thumb_backgroundImage = \"none\";\n        let btn_thumb_background = \"rgba(0, 0, 0, 0.8)\";\n        let ch_btn_txts = [\"🌐\", \"💡\", \"🏷️\"];\n        let replace_preview_text = getTranslation(\"replace preview\");\n        if (!replace_preview_text) {\n            replace_preview_text = \"replace preview\";\n        }\n        //change all \"replace preview\" into an icon\n        let extra_network_id = \"\";\n        let extra_network_node = null;\n        let button_row = null;\n        let search_term_node = null;\n        let search_term = \"\";\n        let model_type = \"\";\n        let cards = null;\n        let need_to_add_buttons = false;\n        //get current tab\n        let active_tab_type = (0, getActiveTabType_1.getActiveTabType)();\n        if (!active_tab_type) {\n            active_tab_type = \"txt2img\";\n        }\n        for (const tab_prefix of tab_prefix_list) {\n            if (tab_prefix != active_tab_type) {\n                continue;\n            }\n            //find out current selected model type tab\n            let active_extra_tab_type = \"\";\n            let extra_tabs = gradioApp().getElementById(tab_prefix + \"_extra_tabs\");\n            if (!extra_tabs) {\n                console.log(\"can not find extra_tabs: \" + tab_prefix + \"_extra_tabs\");\n            }\n            //get active extratab\n            const active_extra_tab = (_a = Array.from(get_uiCurrentTabContent().querySelectorAll(\".extra-network-cards,.extra-network-thumbs\")).find((el) => el.closest(\".tabitem\").style.display === \"block\")) === null || _a === void 0 ? void 0 : _a.id.match(/^(txt2img|img2img)_(.+)_cards$/)[2];\n            console.log(\"found active tab: \" + active_extra_tab);\n            switch (active_extra_tab) {\n                case \"textual_inversion\":\n                    active_extra_tab_type = \"ti\";\n                    break;\n                case \"hypernetworks\":\n                    active_extra_tab_type = \"hyper\";\n                    break;\n                case \"checkpoints\":\n                    active_extra_tab_type = \"ckp\";\n                    break;\n                case \"lora\":\n                    active_extra_tab_type = \"lora\";\n                    break;\n            }\n            for (const js_model_type of model_type_list) {\n                //get model_type for python side\n                switch (js_model_type) {\n                    case \"textual_inversion\":\n                        model_type = \"ti\";\n                        break;\n                    case \"hypernetworks\":\n                        model_type = \"hyper\";\n                        break;\n                    case \"checkpoints\":\n                        model_type = \"ckp\";\n                        break;\n                    case \"lora\":\n                        model_type = \"lora\";\n                        break;\n                }\n                if (!model_type) {\n                    console.log(\"can not get model_type from: \" + js_model_type);\n                    continue;\n                }\n                //only handle current sub-tab\n                if (model_type != active_extra_tab_type) {\n                    continue;\n                }\n                console.log(\"handle active extra tab\");\n                extra_network_id =\n                    tab_prefix + \"_\" + js_model_type + \"_\" + cardid_suffix;\n                // console.log(\"searching extra_network_node: \" + extra_network_id);\n                extra_network_node =\n                    gradioApp().getElementById(extra_network_id);\n                // console.log(\"find extra_network_node: \" + extra_network_id);\n                if (!extra_network_node) {\n                    console.log(\"can not find extra_network_node: \" + extra_network_id);\n                    continue;\n                }\n                // get all card nodes\n                cards = extra_network_node.querySelectorAll(\".card\");\n                for (let card of cards) {\n                    //get button row\n                    button_row = card.querySelector(\".button-row\");\n                    if (!button_row) {\n                        console.log(\"can not find button_row\");\n                        continue;\n                    }\n                    let atags = button_row.querySelectorAll(\"a\");\n                    if (atags && atags.length) {\n                        console.log(\"find atags: \" + atags.length);\n                    }\n                    else {\n                        console.log(\"no atags\");\n                        need_to_add_buttons = true;\n                    }\n                    if (!need_to_add_buttons) {\n                        console.log(\"do not need to add buttons\");\n                        continue;\n                    }\n                    // search_term node\n                    // search_term = subfolder path + model name + ext\n                    search_term_node = card.querySelector(\".actions .additional .search_term\");\n                    if (!search_term_node) {\n                        console.log(\"can not find search_term node for cards in \" +\n                            extra_network_id);\n                        continue;\n                    }\n                    // get search_term\n                    search_term = search_term_node.innerHTML.trim();\n                    if (!search_term) {\n                        console.log(\"search_term is empty for cards in \" +\n                            extra_network_id);\n                        continue;\n                    }\n                    console.log(\"adding buttons\");\n                    // then we need to add 3 buttons to each ul node:\n                    let open_url_node = document.createElement(\"a\");\n                    open_url_node.href = \"#\";\n                    open_url_node.innerHTML = \"🌐\";\n                    open_url_node.className = \"card-button\";\n                    open_url_node.title = \"Open this model's civitai url\";\n                    open_url_node.setAttribute(\"onclick\", \"open_model_url(event, '\" +\n                        model_type +\n                        \"', '\" +\n                        search_term +\n                        \"')\");\n                    let add_trigger_words_node = document.createElement(\"a\");\n                    add_trigger_words_node.href = \"#\";\n                    add_trigger_words_node.innerHTML = \"💡\";\n                    add_trigger_words_node.className = \"card-button\";\n                    add_trigger_words_node.title =\n                        \"Add trigger words to prompt\";\n                    add_trigger_words_node.setAttribute(\"onclick\", \"add_trigger_words(event, '\" +\n                        model_type +\n                        \"', '\" +\n                        search_term +\n                        \"')\");\n                    let use_preview_prompt_node = document.createElement(\"a\");\n                    use_preview_prompt_node.href = \"#\";\n                    use_preview_prompt_node.innerHTML = \"🏷️\";\n                    use_preview_prompt_node.className = \"card-button\";\n                    use_preview_prompt_node.title =\n                        \"Use prompt from preview image\";\n                    use_preview_prompt_node.setAttribute(\"onclick\", \"use_preview_prompt(event, '\" +\n                        model_type +\n                        \"', '\" +\n                        search_term +\n                        \"')\");\n                    let remove_card_node = document.createElement(\"a\");\n                    remove_card_node.href = \"#\";\n                    remove_card_node.innerHTML = \"❌\";\n                    remove_card_node.className = \"card-button\";\n                    remove_card_node.title = \"Remove this model\";\n                    remove_card_node.setAttribute(\"onclick\", \"remove_card(event, '\" +\n                        model_type +\n                        \"', '\" +\n                        search_term +\n                        \"')\");\n                    //add to card\n                    button_row.appendChild(open_url_node);\n                    button_row.appendChild(add_trigger_words_node);\n                    button_row.appendChild(use_preview_prompt_node);\n                    button_row.appendChild(remove_card_node);\n                }\n            }\n        }\n    }\n    // for sd version 1.8.0+\n    // update extra network tab pages' cards\n    // * replace \"replace preview\" text button into an icon\n    // * add 3 button to each card:\n    //  - open model url 🌐\n    //  - add trigger words 💡\n    //  - use preview image's prompt 🏷️\n    // notice: javascript can not get response from python side\n    // so, these buttons just sent request to python\n    // then, python side gonna open url and update prompt text box, without telling js side.\n    function update_card_for_civitai_with_sd1_8() {\n        console.log(\"start update_card_for_civitai_with_sd1_8\");\n        //css\n        let btn_margin = \"0px 5px\";\n        let btn_fontSize = \"200%\";\n        let btn_thumb_fontSize = \"100%\";\n        let btn_thumb_display = \"inline\";\n        let btn_thumb_pos = \"static\";\n        let btn_thumb_backgroundImage = \"none\";\n        let btn_thumb_background = \"rgba(0, 0, 0, 0.8)\";\n        let ch_btn_txts = [\"🌐\", \"💡\", \"🏷️\"];\n        let replace_preview_text = getTranslation(\"replace preview\");\n        if (!replace_preview_text) {\n            replace_preview_text = \"replace preview\";\n        }\n        //change all \"replace preview\" into an icon\n        let extra_network_id = \"\";\n        let extra_network_node = null;\n        let button_row = null;\n        let search_term_node = null;\n        let search_term = \"\";\n        let model_type = \"\";\n        let cards = null;\n        let need_to_add_buttons = false;\n        let extra_tabs = null;\n        let extra_tab = null;\n        let active_extra_tab = null;\n        let active_model_type = \"\";\n        let active_extra_tab_type = \"\";\n        let card_path = \"\";\n        //get current tab\n        let active_tab_type = (0, getActiveTabType_1.getActiveTabType)();\n        if (!active_tab_type) {\n            active_tab_type = \"txt2img\";\n        }\n        for (const tab_prefix of tab_prefix_list) {\n            if (tab_prefix != active_tab_type) {\n                continue;\n            }\n            //find out current selected model type tab\n            extra_tabs = gradioApp().getElementById(tab_prefix + \"_extra_tabs\");\n            if (!extra_tabs) {\n                console.log(\"can not find extra_tabs: \" + tab_prefix + \"_extra_tabs\");\n            }\n            //get tab by id\n            for (const js_model_type of model_type_list) {\n                //get tab\n                let extra_tab = gradioApp().getElementById(tab_prefix + \"_\" + js_model_type);\n                if (extra_tab == null) {\n                    console.log(`can not get extra_tab: ${tab_prefix}_${js_model_type}`);\n                    continue;\n                }\n                //check if tab is active\n                if (extra_tab.style.display == \"block\") {\n                    active_extra_tab = extra_tab;\n                    active_model_type = js_model_type;\n                    break;\n                }\n            }\n            console.log(\"found active_model_type: \" + active_model_type);\n            switch (active_model_type) {\n                case \"textual_inversion\":\n                    active_extra_tab_type = \"ti\";\n                    model_type = \"ti\";\n                    break;\n                case \"hypernetworks\":\n                    active_extra_tab_type = \"hyper\";\n                    model_type = \"hyper\";\n                    break;\n                case \"checkpoints\":\n                    active_extra_tab_type = \"ckp\";\n                    model_type = \"ckp\";\n                    break;\n                case \"lora\":\n                    active_extra_tab_type = \"lora\";\n                    model_type = \"lora\";\n                    break;\n            }\n            //get model_type for python side\n            if (!model_type) {\n                console.log(\"can not get model_type with: \" + active_model_type);\n                continue;\n            }\n            console.log(\"handle active extra tab\");\n            extra_network_id =\n                tab_prefix + \"_\" + active_model_type + \"_\" + cardid_suffix;\n            // console.log(\"searching extra_network_node: \" + extra_network_id);\n            extra_network_node = gradioApp().getElementById(extra_network_id);\n            if (!extra_network_node) {\n                console.log(\"can not find extra_network_node: \" + extra_network_id);\n                continue;\n            }\n            // console.log(\"find extra_network_node: \" + extra_network_id);\n            // get all card nodes\n            cards = extra_network_node.querySelectorAll(\".card\");\n            console.log(`get cards: ${cards.length}`);\n            for (let card of cards) {\n                console.log(`current card: ${card.dataset.name}`);\n                //get button row\n                button_row = card.querySelector(\".button-row\");\n                if (!button_row) {\n                    console.log(\"can not find .button_row\");\n                    continue;\n                }\n                //set button_row's flex-wrap to wrap\n                button_row.style.flexWrap = \"wrap\";\n                let atags = button_row.querySelectorAll(\"a\");\n                if (atags && atags.length) {\n                    console.log(\"find atags: \" + atags.length);\n                }\n                else {\n                    //console.log(\"no atags\");\n                    need_to_add_buttons = true;\n                }\n                if (!need_to_add_buttons) {\n                    console.log(\"no need to add buttons\");\n                    continue;\n                }\n                // search_term node\n                // search_term = subfolder path + model name + ext\n                search_term_node = card.querySelector(\".actions .additional .search_terms\");\n                if (!search_term_node) {\n                    console.log(\"can not find search_term node for cards in \" +\n                        extra_network_id);\n                    continue;\n                }\n                // get search_term\n                search_term = search_term_node.innerHTML.trim();\n                if (!search_term) {\n                    console.log(\"search_term is empty for cards in \" + extra_network_id);\n                    continue;\n                }\n                //from sd v1.8, need to replace all single '\\' into '\\\\'\n                search_term = search_term.replaceAll(\"\\\\\", \"\\\\\\\\\");\n                //`data-sort-path` convert all path to lowercase, which can not be used to find model on linux.\n                //so this is not used and fall back to use search_term\n                //console.log(\"card path: \" + card.dataset.sortPath);\n                //card_path = card.dataset.sortPath.replaceAll(\"\\\\\", \"\\\\\\\\\");\n                console.log(\"adding buttons\");\n                // then we need to add 3 buttons to each ul node:\n                let open_url_node = document.createElement(\"a\");\n                open_url_node.href = \"#\";\n                open_url_node.innerHTML = \"🌐\";\n                open_url_node.className = \"card-button\";\n                open_url_node.title = \"Open this model's civitai url\";\n                open_url_node.setAttribute(\"onclick\", \"open_model_url(event, '\" +\n                    model_type +\n                    \"', '\" +\n                    search_term +\n                    \"')\");\n                let add_trigger_words_node = document.createElement(\"a\");\n                add_trigger_words_node.href = \"#\";\n                add_trigger_words_node.innerHTML = \"💡\";\n                add_trigger_words_node.className = \"card-button\";\n                add_trigger_words_node.title = \"Add trigger words to prompt\";\n                add_trigger_words_node.setAttribute(\"onclick\", \"add_trigger_words(event, '\" +\n                    model_type +\n                    \"', '\" +\n                    search_term +\n                    \"')\");\n                let use_preview_prompt_node = document.createElement(\"a\");\n                use_preview_prompt_node.href = \"#\";\n                use_preview_prompt_node.innerHTML = \"🏷️\";\n                use_preview_prompt_node.className = \"card-button\";\n                use_preview_prompt_node.title = \"Use prompt from preview image\";\n                use_preview_prompt_node.setAttribute(\"onclick\", \"use_preview_prompt(event, '\" +\n                    model_type +\n                    \"', '\" +\n                    search_term +\n                    \"')\");\n                let remove_card_node = document.createElement(\"a\");\n                remove_card_node.href = \"#\";\n                remove_card_node.innerHTML = \"❌\";\n                remove_card_node.className = \"card-button\";\n                remove_card_node.title = \"Remove this model\";\n                remove_card_node.setAttribute(\"onclick\", \"remove_card(event, '\" +\n                    model_type +\n                    \"', '\" +\n                    search_term +\n                    \"')\");\n                //add to card\n                button_row.appendChild(open_url_node);\n                button_row.appendChild(add_trigger_words_node);\n                button_row.appendChild(use_preview_prompt_node);\n                button_row.appendChild(remove_card_node);\n            }\n        }\n        console.log(\"end update_card_for_civitai_with_sd1_8\");\n    }\n    let tab_id = \"\";\n    let toolbar_id = \"\";\n    let refresh_btn_id = \"\";\n    let refresh_btn = null;\n    let extra_tab = null;\n    let extra_toolbar = null;\n    let extra_network_refresh_btn = null;\n    //add refresh button to extra network's toolbar\n    //from sd version 1.8.0, extra network's toolbar is fully rewrited. This extension need to re-write this part too.\n    let sd_version = (0, ch_sd_version_1.ch_sd_version)();\n    console.log(`sd version is: ${sd_version}`);\n    if (sd_version && sd_version >= \"1.8.0\") {\n        for (let prefix of tab_prefix_list) {\n            toolbar_id = prefix + \"_lora_controls\";\n            //with sd 1.8.0, each model type has its own extra toolbar.\n            //so here we need to get all toolbars\n            for (const js_model_type of model_type_list) {\n                //get toolbar\n                toolbar_id = prefix + \"_\" + js_model_type + \"_controls\";\n                //get toolbar\n                extra_toolbar = gradioApp().getElementById(toolbar_id);\n                //get official refresh button\n                refresh_btn_id =\n                    prefix + \"_\" + js_model_type + \"_extra_refresh\";\n                refresh_btn = gradioApp().getElementById(refresh_btn_id);\n                if (!refresh_btn) {\n                    console.log(\"can not find refresh_btn with id: \" + refresh_btn_id);\n                    continue;\n                }\n                // from sd v1.8.0, we add refresh function to official's refresh button\n                refresh_btn.onclick = function (event) {\n                    console.log(\"run refresh button on click\");\n                    //official's refresh function\n                    extraNetworksControlRefreshOnClick(event, prefix, js_model_type);\n                    update_card_for_civitai_with_sd1_8();\n                };\n            }\n        }\n        //run it once\n        //update_card_for_civitai_with_sd1_8();\n    }\n    else {\n        for (let prefix of tab_prefix_list) {\n            tab_id = prefix + \"_extra_tabs\";\n            extra_tab = gradioApp().getElementById(tab_id);\n            //get toolbar\n            //get Refresh button\n            extra_network_refresh_btn = gradioApp().getElementById(\"txt2img_lora_extra_refresh\");\n            console.log(\"get extra_network_refresh_btn: \" + extra_network_refresh_btn);\n            if (!extra_network_refresh_btn) {\n                console.log(\"can not get extra network refresh button for \" + tab_id);\n                continue;\n            }\n            // add refresh button to toolbar\n            let ch_refresh = document.createElement(\"button\");\n            ch_refresh.innerHTML = \"🔁\";\n            ch_refresh.title = \"Refresh Civitai Helper's additional buttons\";\n            ch_refresh.className = \"lg secondary gradio-button\";\n            ch_refresh.style.fontSize = \"200%\";\n            ch_refresh.onclick = update_card_for_civitai;\n            const parrentNode = extra_network_refresh_btn.parentNode;\n            if (!parrentNode) {\n                console.error(\"can not find parrentNode for extra_network_refresh_btn\");\n                return;\n            }\n            parrentNode.appendChild(ch_refresh);\n        }\n        //run it once\n        update_card_for_civitai();\n    }\n});\n"],"names":[],"sourceRoot":""}